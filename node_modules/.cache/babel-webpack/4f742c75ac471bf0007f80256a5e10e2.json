{"ast":null,"code":"import _asyncToGenerator from \"/Users/kieran/development/Website/kierans_website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\n\nconst isPromise = x => {\n  return !isPrimitive(x) && typeof x.then === 'function';\n}; // Effectively infinity, but a SMI.\n\n\nconst _infinity = 0x3fffffff;\nexport class UntilDirective extends AsyncDirective {\n  constructor() {\n    super(...arguments);\n    this.__lastRenderedIndex = _infinity;\n    this.__values = [];\n    this.__weakThis = new PseudoWeakRef(this);\n    this.__pauser = new Pauser();\n  }\n\n  render(...args) {\n    var _a;\n\n    return (_a = args.find(x => !isPromise(x))) !== null && _a !== void 0 ? _a : noChange;\n  }\n\n  update(_part, args) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser; // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n\n      const value = args[i]; // Render non-Promise values immediately\n\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i; // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n\n        return value;\n      } // If this is a Promise we've already handled, skip it.\n\n\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      } // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n\n\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0; // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n\n      Promise.resolve(value).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          // If we're disconnected, wait until we're (maybe) reconnected\n          // The while loop here handles the case that the connection state\n          // thrashes, causing the pauser to resume and then get re-paused\n          while (pauser.get()) {\n            yield pauser.get();\n          } // If the callback gets here and there is no `this`, it means that the\n          // directive has been disconnected and garbage collected and we don't\n          // need to do anything else\n\n\n          const _this = weakThis.deref();\n\n          if (_this !== undefined) {\n            const index = _this.__values.indexOf(value); // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n\n\n            if (index > -1 && index < _this.__lastRenderedIndex) {\n              _this.__lastRenderedIndex = index;\n\n              _this.setValue(result);\n            }\n          }\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n\n    return noChange;\n  }\n\n  disconnected() {\n    this.__weakThis.disconnect();\n\n    this.__pauser.pause();\n  }\n\n  reconnected() {\n    this.__weakThis.reconnect(this);\n\n    this.__pauser.resume();\n  }\n\n}\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\n\nexport const until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};","map":{"version":3,"sources":["/Users/kieran/development/Website/kierans_website/node_modules/lit-html/development/directives/until.js"],"names":["noChange","isPrimitive","directive","AsyncDirective","Pauser","PseudoWeakRef","isPromise","x","then","_infinity","UntilDirective","constructor","arguments","__lastRenderedIndex","__values","__weakThis","__pauser","render","args","_a","find","update","_part","previousValues","previousLength","length","weakThis","pauser","isConnected","disconnected","i","value","Promise","resolve","result","get","_this","deref","undefined","index","indexOf","setValue","disconnect","pause","reconnected","reconnect","resume","until"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\nconst isPromise = (x) => {\n    return !isPrimitive(x) && typeof x.then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\nexport class UntilDirective extends AsyncDirective {\n    constructor() {\n        super(...arguments);\n        this.__lastRenderedIndex = _infinity;\n        this.__values = [];\n        this.__weakThis = new PseudoWeakRef(this);\n        this.__pauser = new Pauser();\n    }\n    render(...args) {\n        var _a;\n        return (_a = args.find((x) => !isPromise(x))) !== null && _a !== void 0 ? _a : noChange;\n    }\n    update(_part, args) {\n        const previousValues = this.__values;\n        let previousLength = previousValues.length;\n        this.__values = args;\n        const weakThis = this.__weakThis;\n        const pauser = this.__pauser;\n        // If our initial render occurs while disconnected, ensure that the pauser\n        // and weakThis are in the disconnected state\n        if (!this.isConnected) {\n            this.disconnected();\n        }\n        for (let i = 0; i < args.length; i++) {\n            // If we've rendered a higher-priority value already, stop.\n            if (i > this.__lastRenderedIndex) {\n                break;\n            }\n            const value = args[i];\n            // Render non-Promise values immediately\n            if (!isPromise(value)) {\n                this.__lastRenderedIndex = i;\n                // Since a lower-priority value will never overwrite a higher-priority\n                // synchronous value, we can stop processing now.\n                return value;\n            }\n            // If this is a Promise we've already handled, skip it.\n            if (i < previousLength && value === previousValues[i]) {\n                continue;\n            }\n            // We have a Promise that we haven't seen before, so priorities may have\n            // changed. Forget what we rendered before.\n            this.__lastRenderedIndex = _infinity;\n            previousLength = 0;\n            // Note, the callback avoids closing over `this` so that the directive\n            // can be gc'ed before the promise resolves; instead `this` is retrieved\n            // from `weakThis`, which can break the hard reference in the closure when\n            // the directive disconnects\n            Promise.resolve(value).then(async (result) => {\n                // If we're disconnected, wait until we're (maybe) reconnected\n                // The while loop here handles the case that the connection state\n                // thrashes, causing the pauser to resume and then get re-paused\n                while (pauser.get()) {\n                    await pauser.get();\n                }\n                // If the callback gets here and there is no `this`, it means that the\n                // directive has been disconnected and garbage collected and we don't\n                // need to do anything else\n                const _this = weakThis.deref();\n                if (_this !== undefined) {\n                    const index = _this.__values.indexOf(value);\n                    // If state.values doesn't contain the value, we've re-rendered without\n                    // the value, so don't render it. Then, only render if the value is\n                    // higher-priority than what's already been rendered.\n                    if (index > -1 && index < _this.__lastRenderedIndex) {\n                        _this.__lastRenderedIndex = index;\n                        _this.setValue(result);\n                    }\n                }\n            });\n        }\n        return noChange;\n    }\n    disconnected() {\n        this.__weakThis.disconnect();\n        this.__pauser.pause();\n    }\n    reconnected() {\n        this.__weakThis.reconnect(this);\n        this.__pauser.resume();\n    }\n}\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"]},"metadata":{},"sourceType":"module"}