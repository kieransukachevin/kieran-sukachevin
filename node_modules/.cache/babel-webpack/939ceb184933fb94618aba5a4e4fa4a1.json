{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\n\nimport { _$LH } from './lit-html.js';\nconst {\n  _ChildPart: ChildPart\n} = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : node => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\n\nexport const isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2\n};\n/**\n * Tests if a value is a TemplateResult.\n */\n\nexport const isTemplateResult = (value, type) => type === undefined ? // This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litType$']) !== undefined : (value === null || value === void 0 ? void 0 : value['_$litType$']) === type;\n/**\n * Tests if a value is a DirectiveResult.\n */\n\nexport const isDirectiveResult = value => // This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litDirective$']) !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\n\nexport const getDirectiveClass = value => // This property needs to remain unminified.\nvalue === null || value === void 0 ? void 0 : value['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\n\nexport const isSingleExpression = part => part.strings === undefined;\n\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\n\n\nexport const insertPart = (containerPart, refPart, part) => {\n  var _a;\n\n  const container = wrap(containerPart._$startNode).parentNode;\n  const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n  } else {\n    const endNode = wrap(part._$endNode).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n\n    if (parentChanged) {\n      (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart); // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n\n      part._$parent = containerPart; // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n\n      let newConnectionState;\n\n      if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n\n    if (endNode !== refNode || parentChanged) {\n      let start = part._$startNode;\n\n      while (start !== endNode) {\n        const n = wrap(start).nextSibling;\n        wrap(container).insertBefore(start, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\n\nexport const setChildPartValue = (part, value, directiveParent = part) => {\n  part._$setValue(value, directiveParent);\n\n  return part;\n}; // A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\n\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\n\nexport const setCommittedValue = (part, value = RESET_VALUE) => part._$committedValue = value;\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\n\nexport const getCommittedValue = part => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\n\nexport const removePart = part => {\n  var _a;\n\n  (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n  let start = part._$startNode;\n  const end = wrap(part._$endNode).nextSibling;\n\n  while (start !== end) {\n    const n = wrap(start).nextSibling;\n    wrap(start).remove();\n    start = n;\n  }\n};\nexport const clearPart = part => {\n  part._$clear();\n};","map":{"version":3,"sources":["/Users/kieran/development/Website/kierans_website/node_modules/lit-html/development/directive-helpers.js"],"names":["_a","_b","_$LH","_ChildPart","ChildPart","ENABLE_SHADYDOM_NOPATCH","wrap","window","ShadyDOM","inUse","noPatch","node","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","call","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\nimport { _$LH } from './lit-html.js';\nconst { _ChildPart: ChildPart } = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH &&\n    ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) &&\n    ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true\n    ? window.ShadyDOM.wrap\n    : (node) => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value) => value === null || (typeof value != 'object' && typeof value != 'function');\nexport const TemplateResultType = {\n    HTML: 1,\n    SVG: 2,\n};\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (value, type) => type === undefined\n    ? // This property needs to remain unminified.\n        (value === null || value === void 0 ? void 0 : value['_$litType$']) !== undefined\n    : (value === null || value === void 0 ? void 0 : value['_$litType$']) === type;\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value) => \n// This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litDirective$']) !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value) => \n// This property needs to remain unminified.\nvalue === null || value === void 0 ? void 0 : value['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part) => part.strings === undefined;\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (containerPart, refPart, part) => {\n    var _a;\n    const container = wrap(containerPart._$startNode).parentNode;\n    const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n    if (part === undefined) {\n        const startNode = wrap(container).insertBefore(createMarker(), refNode);\n        const endNode = wrap(container).insertBefore(createMarker(), refNode);\n        part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n    }\n    else {\n        const endNode = wrap(part._$endNode).nextSibling;\n        const oldParent = part._$parent;\n        const parentChanged = oldParent !== containerPart;\n        if (parentChanged) {\n            (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart);\n            // Note that although `_$reparentDisconnectables` updates the part's\n            // `_$parent` reference after unlinking from its current parent, that\n            // method only exists if Disconnectables are present, so we need to\n            // unconditionally set it here\n            part._$parent = containerPart;\n            // Since the _$isConnected getter is somewhat costly, only\n            // read it once we know the subtree has directives that need\n            // to be notified\n            let newConnectionState;\n            if (part._$notifyConnectionChanged !== undefined &&\n                (newConnectionState = containerPart._$isConnected) !==\n                    oldParent._$isConnected) {\n                part._$notifyConnectionChanged(newConnectionState);\n            }\n        }\n        if (endNode !== refNode || parentChanged) {\n            let start = part._$startNode;\n            while (start !== endNode) {\n                const n = wrap(start).nextSibling;\n                wrap(container).insertBefore(start, refNode);\n                start = n;\n            }\n        }\n    }\n    return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = (part, value, directiveParent = part) => {\n    part._$setValue(value, directiveParent);\n    return part;\n};\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part, value = RESET_VALUE) => (part._$committedValue = value);\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part) => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part) => {\n    var _a;\n    (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n    let start = part._$startNode;\n    const end = wrap(part._$endNode).nextSibling;\n    while (start !== end) {\n        const n = wrap(start).nextSibling;\n        wrap(start).remove();\n        start = n;\n    }\n};\nexport const clearPart = (part) => {\n    part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}