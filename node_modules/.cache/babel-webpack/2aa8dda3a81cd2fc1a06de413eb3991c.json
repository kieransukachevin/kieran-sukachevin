{"ast":null,"code":"import _asyncToGenerator from \"/Users/kieran/development/Website/kierans_website/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\nconst isPromise = x => {\n  return !isPrimitive(x) && typeof x.then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\nexport class UntilDirective extends AsyncDirective {\n  constructor() {\n    super(...arguments);\n    this.__lastRenderedIndex = _infinity;\n    this.__values = [];\n    this.__weakThis = new PseudoWeakRef(this);\n    this.__pauser = new Pauser();\n  }\n  render(...args) {\n    var _a;\n    return (_a = args.find(x => !isPromise(x))) !== null && _a !== void 0 ? _a : noChange;\n  }\n  update(_part, args) {\n    const previousValues = this.__values;\n    let previousLength = previousValues.length;\n    this.__values = args;\n    const weakThis = this.__weakThis;\n    const pauser = this.__pauser;\n    // If our initial render occurs while disconnected, ensure that the pauser\n    // and weakThis are in the disconnected state\n    if (!this.isConnected) {\n      this.disconnected();\n    }\n    for (let i = 0; i < args.length; i++) {\n      // If we've rendered a higher-priority value already, stop.\n      if (i > this.__lastRenderedIndex) {\n        break;\n      }\n      const value = args[i];\n      // Render non-Promise values immediately\n      if (!isPromise(value)) {\n        this.__lastRenderedIndex = i;\n        // Since a lower-priority value will never overwrite a higher-priority\n        // synchronous value, we can stop processing now.\n        return value;\n      }\n      // If this is a Promise we've already handled, skip it.\n      if (i < previousLength && value === previousValues[i]) {\n        continue;\n      }\n      // We have a Promise that we haven't seen before, so priorities may have\n      // changed. Forget what we rendered before.\n      this.__lastRenderedIndex = _infinity;\n      previousLength = 0;\n      // Note, the callback avoids closing over `this` so that the directive\n      // can be gc'ed before the promise resolves; instead `this` is retrieved\n      // from `weakThis`, which can break the hard reference in the closure when\n      // the directive disconnects\n      Promise.resolve(value).then( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (result) {\n          // If we're disconnected, wait until we're (maybe) reconnected\n          // The while loop here handles the case that the connection state\n          // thrashes, causing the pauser to resume and then get re-paused\n          while (pauser.get()) {\n            yield pauser.get();\n          }\n          // If the callback gets here and there is no `this`, it means that the\n          // directive has been disconnected and garbage collected and we don't\n          // need to do anything else\n          const _this = weakThis.deref();\n          if (_this !== undefined) {\n            const index = _this.__values.indexOf(value);\n            // If state.values doesn't contain the value, we've re-rendered without\n            // the value, so don't render it. Then, only render if the value is\n            // higher-priority than what's already been rendered.\n            if (index > -1 && index < _this.__lastRenderedIndex) {\n              _this.__lastRenderedIndex = index;\n              _this.setValue(result);\n            }\n          }\n        });\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    }\n    return noChange;\n  }\n  disconnected() {\n    this.__weakThis.disconnect();\n    this.__pauser.pause();\n  }\n  reconnected() {\n    this.__weakThis.reconnect(this);\n    this.__pauser.resume();\n  }\n}\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};","map":{"version":3,"names":["noChange","isPrimitive","directive","AsyncDirective","Pauser","PseudoWeakRef","isPromise","x","then","_infinity","UntilDirective","constructor","arguments","__lastRenderedIndex","__values","__weakThis","__pauser","render","args","_a","find","update","_part","previousValues","previousLength","length","weakThis","pauser","isConnected","disconnected","i","value","Promise","resolve","result","get","_this","deref","undefined","index","indexOf","setValue","disconnect","pause","reconnected","reconnect","resume","until"],"sources":["/Users/kieran/development/Website/kierans_website/node_modules/lit-html/development/directives/until.js"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { noChange } from '../lit-html.js';\nimport { isPrimitive } from '../directive-helpers.js';\nimport { directive, AsyncDirective } from '../async-directive.js';\nimport { Pauser, PseudoWeakRef } from './private-async-helpers.js';\nconst isPromise = (x) => {\n    return !isPrimitive(x) && typeof x.then === 'function';\n};\n// Effectively infinity, but a SMI.\nconst _infinity = 0x3fffffff;\nexport class UntilDirective extends AsyncDirective {\n    constructor() {\n        super(...arguments);\n        this.__lastRenderedIndex = _infinity;\n        this.__values = [];\n        this.__weakThis = new PseudoWeakRef(this);\n        this.__pauser = new Pauser();\n    }\n    render(...args) {\n        var _a;\n        return (_a = args.find((x) => !isPromise(x))) !== null && _a !== void 0 ? _a : noChange;\n    }\n    update(_part, args) {\n        const previousValues = this.__values;\n        let previousLength = previousValues.length;\n        this.__values = args;\n        const weakThis = this.__weakThis;\n        const pauser = this.__pauser;\n        // If our initial render occurs while disconnected, ensure that the pauser\n        // and weakThis are in the disconnected state\n        if (!this.isConnected) {\n            this.disconnected();\n        }\n        for (let i = 0; i < args.length; i++) {\n            // If we've rendered a higher-priority value already, stop.\n            if (i > this.__lastRenderedIndex) {\n                break;\n            }\n            const value = args[i];\n            // Render non-Promise values immediately\n            if (!isPromise(value)) {\n                this.__lastRenderedIndex = i;\n                // Since a lower-priority value will never overwrite a higher-priority\n                // synchronous value, we can stop processing now.\n                return value;\n            }\n            // If this is a Promise we've already handled, skip it.\n            if (i < previousLength && value === previousValues[i]) {\n                continue;\n            }\n            // We have a Promise that we haven't seen before, so priorities may have\n            // changed. Forget what we rendered before.\n            this.__lastRenderedIndex = _infinity;\n            previousLength = 0;\n            // Note, the callback avoids closing over `this` so that the directive\n            // can be gc'ed before the promise resolves; instead `this` is retrieved\n            // from `weakThis`, which can break the hard reference in the closure when\n            // the directive disconnects\n            Promise.resolve(value).then(async (result) => {\n                // If we're disconnected, wait until we're (maybe) reconnected\n                // The while loop here handles the case that the connection state\n                // thrashes, causing the pauser to resume and then get re-paused\n                while (pauser.get()) {\n                    await pauser.get();\n                }\n                // If the callback gets here and there is no `this`, it means that the\n                // directive has been disconnected and garbage collected and we don't\n                // need to do anything else\n                const _this = weakThis.deref();\n                if (_this !== undefined) {\n                    const index = _this.__values.indexOf(value);\n                    // If state.values doesn't contain the value, we've re-rendered without\n                    // the value, so don't render it. Then, only render if the value is\n                    // higher-priority than what's already been rendered.\n                    if (index > -1 && index < _this.__lastRenderedIndex) {\n                        _this.__lastRenderedIndex = index;\n                        _this.setValue(result);\n                    }\n                }\n            });\n        }\n        return noChange;\n    }\n    disconnected() {\n        this.__weakThis.disconnect();\n        this.__pauser.pause();\n    }\n    reconnected() {\n        this.__weakThis.reconnect(this);\n        this.__pauser.resume();\n    }\n}\n/**\n * Renders one of a series of values, including Promises, to a Part.\n *\n * Values are rendered in priority order, with the first argument having the\n * highest priority and the last argument having the lowest priority. If a\n * value is a Promise, low-priority values will be rendered until it resolves.\n *\n * The priority of values can be used to create placeholder content for async\n * data. For example, a Promise with pending content can be the first,\n * highest-priority, argument, and a non_promise loading indicator template can\n * be used as the second, lower-priority, argument. The loading indicator will\n * render immediately, and the primary content will render when the Promise\n * resolves.\n *\n * Example:\n *\n * ```js\n * const content = fetch('./content.txt').then(r => r.text());\n * html`${until(content, html`<span>Loading...</span>`)}`\n * ```\n */\nexport const until = directive(UntilDirective);\n/**\n * The type of the class that powers this directive. Necessary for naming the\n * directive's return type.\n */\n// export type {UntilDirective};\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}